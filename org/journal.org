#+TAGS: noexport(n) software(s) Alexis(a) Florence(f) deprecated(d) EM(e) HMM(h) MMST(m)

#+Title: Journal
#+AUTHOR:      Steven QUINITO MASNADA
#+BABEL: :tangle yes :noweb yes

* TODO Objectives [0/7]
  - [ ] Create R package from Stephane Despreaux source code
  - [ ] Implement Markov field approach
  - [ ] Discuss best practices with Jaime
  - [ ] Try to install SpaceM^3 to see if it is still compatible
  - [ ] Parallelization [0/5]
    - [ ] Find literature about Markov fields computation
      parallelization
    - [ ] Take a look at Stable/independent set \to Markov fields
      decomposition 
    - [ ] GPUs
    - [ ] Cluster
    - [ ] Is StarPU suited?
  - [ ] Optimization [0/1]
    - [ ] Is BOAST suited? Can we mix it with StarPU?
  - [ ] Centralize Alexis's code and repo?
* Tips

** Org mode
   - To format a text to fit 80 charac / line \to fill-paragraph or fill-region
* September
** 2017-09-05
*** Tumor detection process                                        :software:
    1. ROI localization
      a. Build the reference model of healthy subjects:
        - Find data cluster according to their distribution (multiple
        scale t-distributions) using the EM algorithm 
        - Aggregate these distributions into a mixture model
      b. Distriminate abnormal voxels:
        - By using reference model to compute likelyhood score for each
          voxels 
        - Determine a threshold to distinguish healthy from pathological
	  - Compute the different anomaly level thresholds using slope
            heuristic
	  - Compute threshold of only 2 components (healthy /
            pathological) and keep the closest to one of the threshold
            computed previously.
    2. Build a anomaly model:
       - same as in 1.a on abnormal voxels
    3. Fingerprint model \to Supervised learning to characterize the
       different tumor types:
       - Compute the proportion of each anomaly clusters in the tumors
       - Take into account their sizes.
    4. Remove healthy isolated voxels considered as abnormal.
       - Refined segmentation \to erosion-dilatation kernel to remove
         isolated voxels.
       - Refined fingerprint model \to redo 3. using refined segmentation
** 2017-09-11
*** EM algorithm explanation                                  :deprecated:EM:
    _*Update:* The EM algorithm has been studied and described with more detail_
    _in [[file:Notes.org][Notes.org]] and in [[file:HMM_MMST.org][HMM_MMST.org]]._

    In this case, the models used are t-distributions and the EM
    algorithm try to find the following parameters:
    - \mu \to mean of the distribution
    - D \to Covariance matrix \to orientation
    - A \to shape and volume
    - \nu \to degrees of freedom
    
    There are two steps:
    - Expectation \to compute posterior probabilities \to find latent variables
    - Maximization \to update parameter model by maximizing the log likelyhood
      \to find parameter values
            
* October
** 2017-10-20
*** Meeting
    - For parallelization take a look at independent set \to grid/graph
      partitioning, conditional independence + GPU + MRF
    - Ideally, the order for which we compute the label
      distribution (q_{z_n}) at each site should be randomized. This
      imply a different graph dependency at each iteration.
    - \beta \to Numerical optimization involves of sum above all the voxels
      \to costly \to take a look at stochastic gradient.
* November
** 2017-11-06
   - Considering the code, it seems a project is implemented by method
     (e.g baysian, HMM, etc...) maybe it should be better if
     everything is gathered in one project \to same code base.

   - At first we will start with a 2D neighbourhood because on rat MRI
     the resolution on the z-axis is low (only 5 vs 256). Indeed each slice
     of the z-axis is far form each others and in this case
     considering the neighbours in the z-axis seems not important
     because they are very far compared to the one on the x or
     y-axis. When moving to human MRI 3D neighbourhood will be necessary.
** 2017-11-13
*** TODO Meeting
**** TODO Algorithms
**** TODO Code organization
**** TODO Git repo organization
     - [ ] A git based work-flow https://hal.inria.fr/hal-01112795/file/SIGOPS_paper.pdf
* Emacs Setup 							   :noexport:
  This document has local variables in its postembule, which should
  allow Org-mode to work seamlessly without any setup. If you're
  uncomfortable using such variables, you can safely ignore them at
  startup. Exporting may require that you copy them in your .emacs.

# Local Variables:
# eval:    (require 'org-install)
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (sh . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (unless (boundp 'org-latex-classes) (setq org-latex-classes nil))
# eval:    (add-to-list 'org-latex-classes '("memoir" "\\documentclass[smallextended]{memoir} \n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}" ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
# eval:    (add-to-list 'org-latex-classes '("acm-proc-article-sp" "\\documentclass{acm_proc_article-sp}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:   (setq org-export-babel-evaluate nil)
# eval:   (setq ispell-local-dictionary "english")
# eval:   (eval (flyspell-mode t))
# eval:    (setq org-latex-listings 'minted)
# eval:    (setq org-latex-minted-options '(("bgcolor" "white") ("style" "tango") ("numbers" "left") ("numbersep" "5pt")))
# End:
